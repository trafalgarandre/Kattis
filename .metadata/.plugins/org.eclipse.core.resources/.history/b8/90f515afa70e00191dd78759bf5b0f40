import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;


public class kattis_gridgame {
	static boolean[][] check;
	static boolean[] row, col;
	static int n;
	
	public static void main(String args[]) throws NumberFormatException, IOException {
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		n = Integer.parseInt(reader.readLine());
		Node[] nodes = new Node[n * n];
		check = new boolean[n][n];
		for (int i = 0; i < n; i++) {
			StringTokenizer tokenizer = new StringTokenizer(reader.readLine());
			for (int j = 0; j < n; j++) {
				nodes[i * n + j] = new Node(i, j, Integer.parseInt(tokenizer.nextToken()));
				check[i][j] = false;
			}
		}
		Arrays.sort(nodes);
		int count = n * n - 1;
		int result = 0;
		while (count >= 0) {
			row = new boolean[n];
			col = new boolean[n];
			row[nodes[count].row] = true;
			col[nodes[count].col] = true;
			check[nodes[count].row][nodes[count].col] = true;
			if (findCombination(0, nodes[count].row)) {
				result = nodes[count].weight;
			}
			count--;
		}
		System.out.println(result);
	}
	
	public static boolean findCombination(int r, int forbid) {
		if (r == n) {
			return true;
		} else {
			boolean result = false;
			if (r == forbid) {
				result = findCombination(r + 1, forbid);
			} else {
				for (int i = 0; i < n; i++) {
					if (!check[r][i] && !col[i] && !row[r]) {
						check[r][i] = true;
						row[r] = true;
						col[i] = true;
						result = findCombination(r + 1, forbid);
						col[i] = false;
						row[r] = false;
						check[r][i] = false;
					}
				}
			}
			return result;
		}
		
	}
	
	static class Node implements Comparable<Node> {
		int row, col, weight;
		Node(int _row, int _col, int _weight) {
			row = _row;
			col = _col;
			weight = _weight;
		}
		
		public int compareTo(Node other) {
			return other.weight - this.weight;
		}
	}
}
