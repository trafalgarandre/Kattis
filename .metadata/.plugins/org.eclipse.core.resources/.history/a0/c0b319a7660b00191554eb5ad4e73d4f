import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;


public class kattis_wheresmyinternet {
	public static void main(String args[]) throws IOException {
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer tokenizer = new StringTokenizer(reader.readLine());
		int n = Integer.parseInt(tokenizer.nextToken());
		int m = Integer.parseInt(tokenizer.nextToken());
		Graph g = new Graph(n, m);
		for (int i = 0; i < m; i++) {
			tokenizer = new StringTokenizer(reader.readLine());
			
		}
	}
	
	static class Graph 
	{ 
		int V, E; 
		Edge[] edge; 
		  
		Graph(int nV, int nE) 
		{ 
		    V = nV; 
		    E = nE; 
		    edge = new Edge[E]; 
		    for (int i = 0; i < E; i++)  
		    { 
		        edge[i] = new Edge(); 
		    } 
		} 
		  
		// class to represent edge  
		class Edge 
		{ 
		    int src, dest; 
		} 
		  
		// class to represent Subset 
		class subset 
		{ 
		    int parent; 
		    int rank; 
		} 
		  
		// A utility function to find  
		// set of an element i (uses  
		// path compression technique) 
		int find(subset [] subsets , int i) 
		{ 
		if (subsets[i].parent != i) 
		    subsets[i].parent = find(subsets,  
		                             subsets[i].parent); 
		    return subsets[i].parent; 
		} 
		  
		// A function that does union 
		// of two sets of x and y 
		// (uses union by rank) 
		void Union(subset [] subsets,  
		           int x , int y ) 
		{ 
		    int xroot = find(subsets, x); 
		        int yroot = find(subsets, y); 
		  
		    if (subsets[xroot].rank < subsets[yroot].rank) 
		        subsets[xroot].parent = yroot; 
		    else if (subsets[yroot].rank < subsets[xroot].rank) 
		        subsets[yroot].parent = xroot; 
		    else
		    { 
		        subsets[xroot].parent = yroot; 
		        subsets[yroot].rank++; 
		    } 
		} 
	}
}
