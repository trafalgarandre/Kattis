import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.StringTokenizer;


public class b_mini1 {
	public static void main(String args[]) throws NumberFormatException, IOException {
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		int tc = Integer.parseInt(reader.readLine());
		for(int i = 0; i < tc; i++) {
			StringTokenizer tokenizer = new StringTokenizer(reader.readLine());
			BigDecimal x1 = new BigDecimal("0." + tokenizer.nextToken());
			int n1 = Integer.parseInt(tokenizer.nextToken());
			BigDecimal x2 = new BigDecimal("0." + tokenizer.nextToken());
			int n2 = Integer.parseInt(tokenizer.nextToken());
		}
	}
	
	static class Frac {
		BigInteger up;
		BigInteger down = BigInteger.ONE;
		
		public Frac(String x, int n) {
			BigDecimal rep = new BigDecimal("0." + x.substring(x.length() - n)); 
			BigDecimal bigRep = rep;
			for (int i = 0; i < n; i++) {
				bigRep = bigRep.multiply(BigDecimal.TEN);
			}
			BigInteger demo = BigInteger.TEN;
			for (int i = 0; i < x.length() - n; i++) {
				demo = demo.multiply(BigInteger.TEN);
			}
		}
		
		public Frac(BigInteger _up, BigInteger _down) {
			up = _up;
			down = _down;
		}
	}
	
	static BigDecimal gcd(BigDecimal a, BigDecimal b) {
		return b.equals(BigDecimal.ZERO) ? a : gcd(b, a.m b);
	}
}
