import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.StringTokenizer;


public class kattis_abandonedanimal {
	public static void main(String args[]) throws NumberFormatException, IOException {
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		int n = Integer.parseInt(reader.readLine());
		int k = Integer.parseInt(reader.readLine());
		ArrayList<String> item = new ArrayList(k);
		StringTokenizer tokenizer;
		for (int i = 0; i < k; i++) {
			tokenizer = new StringTokenizer(reader.readLine());
			tokenizer.nextToken();
			item.add(tokenizer.nextToken());
		}
		int m = Integer.parseInt(reader.readLine());
		ArrayList<String> bought = new ArrayList(m);
		for (int i = 0; i < k; i++) {
			tokenizer = new StringTokenizer(reader.readLine());
			bought.add(tokenizer.nextToken());
		}
		
		LinkedList<Integer> front = new LinkedList<Integer>();
		int i = 0;
		int j = 0;
		while (i < k && j < n) {
			if (item.get(j).equals(bought.get(i))) {
				front.add(j);
				i++;
			}
			j++;
		}
		LinkedList<Integer> back = new LinkedList<Integer>();
		i = k - 1;
		j = n - 1;
		while (i >= 0 && j >= 0) {
			if (item.get(j).equals(bought.get(i))) {
				back.addFirst(j);
				i--;
			}
			j--;
		}
		if (front.size() != k) {
			System.out.println("impossible");
		} else {
			boolean check = true;
			for (int l = 0; l < k; l++) {
				if (front.pop() != back.pop()) {
					check = false;
				}
			}
			if (check) {
				System.out.println("unique");
			} else {
				System.out.println("ambiguous");
			}
		}
	}
}
