import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;


public class kattis_wheresmyinternet {
	public static void main(String args[]) throws IOException {
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer tokenizer = new StringTokenizer(reader.readLine());
		int n = Integer.parseInt(tokenizer.nextToken());
		int m = Integer.parseInt(tokenizer.nextToken());
		DisjointSet g = new DisjointSet();
		for (int i = 0; i < n; i++) {
			g.makeSet(i);
		}
		for (int i = 0; i < m; i++) {
			tokenizer = new StringTokenizer(reader.readLine());
			g.union(Integer.parseInt(tokenizer.nextToken()) - 1, Integer.parseInt(tokenizer.nextToken()) - 1);
		}
		
		boolean isConnected = true;
		for (int i = 1 ; i < n; i++) {
			if (g.findSet(i) != g.findSet(0)) {
				isConnected = false;
				System.out.println(i + 1);
			}
		}
		if (isConnected) {
			System.out.println("Connected");
		}
	}
	
	static class DisjointSet {

	    private Map<Long, Node> map = new HashMap<>();

	    class Node {
	        long data;
	        Node parent;
	        int rank;
	    }

	    /**
	     * Create a set with only one element.
	     */
	    public void makeSet(long data) {
	        Node node = new Node();
	        node.data = data;
	        node.parent = node;
	        node.rank = 0;
	        map.put(data, node);
	    }

	    /**
	     * Combines two sets together to one.
	     * Does union by rank
	     *
	     * @return true if data1 and data2 are in different set before union else false.
	     */
	    public boolean union(long data1, long data2) {
	        Node node1 = map.get(data1);
	        Node node2 = map.get(data2);

	        Node parent1 = findSet(node1);
	        Node parent2 = findSet(node2);

	        //if they are part of same set do nothing
	        if (parent1.data == parent2.data) {
	            return false;
	        }

	        //else whoever's rank is higher becomes parent of other
	        if (parent1.rank >= parent2.rank) {
	            //increment rank only if both sets have same rank
	            parent1.rank = (parent1.rank == parent2.rank) ? parent1.rank + 1 : parent1.rank;
	            parent2.parent = parent1;
	        } else {
	            parent1.parent = parent2;
	        }
	        return true;
	    }

	    /**
	     * Finds the representative of this set
	     */
	    public long findSet(long data) {
	        return findSet(map.get(data)).data;
	    }

	    /**
	     * Find the representative recursively and does path
	     * compression as well.
	     */
	    private Node findSet(Node node) {
	        Node parent = node.parent;
	        if (parent == node) {
	            return parent;
	        }
	        node.parent = findSet(node.parent);
	        return node.parent;
	    }
	}
}
